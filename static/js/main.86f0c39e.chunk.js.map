{"version":3,"sources":["Components/Home.js","Components/decrypt.js","Components/Company.js","Components/Navbar.js","Components/Admin.js","App.js","serviceWorker.js","index.js","Components/encrypt.js","style/style.js","Components/University.js","ipfs.js","getWeb3.js"],"names":["Div","styled","div","props","theme","colors","background","Container","Header","h1","font","Subheader","p","font2","Paragraph","Button","button","StyledLink","Link","Home","className","to","decrypt","encryptedData","certId","bytes","CryptoJS","AES","process","REACT_APP_SALT","JSON","parse","toString","enc","Utf8","Company","submitId","e","a","preventDefault","state","contract","methods","getCertificate","call","certificate","console","log","setState","name","university","acronym","course","ipfshash","date","showModal","alert","handleChange","bind","handleOpenModal","handleCloseModal","web3","accounts","loading","getWeb3","eth","net","getId","networkId","deployedNetwork","Certification","networks","instance","Contract","abi","address","this","event","target","value","style","fontWeight","type","id","placeholder","onChange","SectionButton","ViewButton","onClick","isOpen","ariaHideApp","contentLabel","overlayClassName","onRequestClose","paddingLeft","href","rel","display","margin","width","position","marginLeft","marginTop","color","src","alt","onLoad","onError","Component","Navbar","isConnected","getAccounts","Nav","EndNav","nav","Admin","submitAddress","getIssuer","issuerRegister","send","from","gas","then","result","events","IssuerRegistered","returnValues","error","contraacts","AdminButton","App","path","element","University","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","fonts","fontSizes","small","medium","large","document","getElementById","navigator","serviceWorker","ready","registration","unregister","encrypt","inputData","stringify","submitData","firstname","lastname","errors","validate","length","d","Date","issuer","buffer","ipfs","files","add","hash","ipfsHash","uuidv4","fullName","generateCertificate","getDate","getMonth","getFullYear","getPastEvents","CertificateGenerated","showId","captureFile","storageValue","chainId","getChainId","file","reader","FileReader","readAsArrayBuffer","onloadend","Buffer","reload","push","Form","htmlFor","required","FormButton","CertID","Error","map","key","height","fontSize","form","require","host","port","protocol","Promise","resolve","reject","ethereum","Web3","enable","provider","providers","HttpProvider"],"mappings":"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","file":"static/js/main.86f0c39e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Div = styled.div`\r\n  background-color: ${(props) => props.theme.colors.background};\r\n  width: 100%;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  background-color: ${(props) => props.theme.colors.background};\r\n  width: 32%;\r\n  margin: 10% auto;`\r\n\r\nconst Header = styled.h1`\r\n  display: block;\r\n  color: ${(props) => props.theme.colors.font};\r\n  font-size: 50px;\r\n  letter-spacing: 8px;\r\n`;\r\n\r\nconst Subheader = styled.p`\r\n  display: block;\r\n  color: ${(props) => props.theme.colors.font2};\r\n  font-size: 20px;\r\n  margin-top: -10px;\r\n  margin-bottom: 40px;\r\n  letter-spacing: 5px;\r\n`\r\nconst Paragraph = styled.p`\r\n  display: inline-block;\r\n  color: ${(props) => props.theme.colors.font};\r\n  font-size: 20px;\r\n  text-align: left;\r\n  letter-spacing: 1px;`\r\n\r\nconst Button = styled.button`\r\n  padding: 15px;\r\n  border-radius: 5px;\r\n  border: 0px solid;\r\n  margin: 20px;\r\n  background-color: #6371e5;\r\n  color: #ffffff;\r\n  transition: 0.3s;\r\n  box-shadow: 4px 2px 16px -7px rgba(0,0,0,0.59);\r\n  :hover {\r\n    cursor: pointer;\r\n    background-color: #ffffff;\r\n    color:${(props) => props.theme.colors.font};\r\n    border: 2px solid #6371e5;\r\n    padding: 14px;\r\n  }`\r\n\r\nconst StyledLink = styled(Link)`\r\n    text-decoration: none;\r\n    &:focus, &:hover, &:visited, &:link, &:active {\r\n        text-decoration: none;\r\n    }\r\n`;\r\n\r\n\r\n\r\nfunction Home() {\r\n  return (\r\n    <Div>\r\n      <Container>\r\n      <Header>Certificate System</Header>\r\n      <Subheader>Using Ethereum Blockchain</Subheader>\r\n      <Paragraph>A Decentralized Certificate Issuance and Verification System to create certificates that are Immutable, Cryptographically Secured, and have Zero Downtime. All powered by decentralized Ethereum Smart Contracts</Paragraph>\r\n      <StyledLink className=\"left-button\" to=\"/university\"><Button>ISSUE CERTIFICATE</Button></StyledLink>\r\n      <StyledLink className=\"right-button\" to=\"/company\"><Button>VIEW CERTIFICATE</Button></StyledLink>\r\n      </Container>\r\n    </Div>\r\n  );\r\n}\r\n\r\nexport default Home;","import CryptoJS from \"crypto-js\";\r\n\r\nexport function decrypt(encryptedData, certId) {\r\n    let bytes = CryptoJS.AES.decrypt(encryptedData, certId + process.env.REACT_APP_SALT);\r\n    return JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\r\n}","import React, {Component} from 'react'\r\nimport styled from 'styled-components'\r\nimport Certification from \"../contracts/Certification.json\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport { decrypt } from \"./decrypt\";\r\nimport { Button, Div } from \"../style/style\";\r\nimport { ClapSpinner } from \"react-spinners-kit\";\r\nimport ReactModal from 'react-modal';\r\n\r\nclass Company extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.submitId = this.submitId.bind(this)\r\n    this.handleOpenModal = this.handleOpenModal.bind(this)\r\n    this.handleCloseModal = this.handleCloseModal.bind(this);\r\n    this.state = {\r\n      web3: null,\r\n      accounts: null, \r\n      contract: null, \r\n      certId: null,\r\n      showModal: false,\r\n      loading: true,\r\n      name: '',\r\n      university: '',\r\n      acronym: '',\r\n      course: '',\r\n      ipfshash: '',\r\n      date: '',\r\n    }\r\n  }\r\n\r\n  async componentDidMount(){\r\n \r\n    // Get network provider and web3 instance.\r\n    console.log('Company Page loaded')\r\n    const web3 = await getWeb3()\r\n\r\n    // Get the contract instance.\r\n    const networkId = await web3.eth.net.getId()\r\n    const deployedNetwork = Certification.networks[networkId]\r\n    console.log('University Page loaded after web3')\r\n    const instance = new web3.eth.Contract(\r\n      Certification.abi,\r\n      deployedNetwork && deployedNetwork.address,\r\n    )\r\n    // Set web3, accounts, and contract to the state, and then proceed with an\r\n    // example of interacting with the contract's methods.\r\n    this.setState({ web3, contract: instance })\r\n    console.log(this.state.contract)\r\n\r\n  };\r\n\r\n  handleChange(event){\r\n    this.setState({\r\n      // Computed property names\r\n      // keys of the objects are computed dynamically\r\n      [event.target.name] : event.target.value\r\n    })\r\n    console.log(event.target.name, event.target.value)\r\n  }\r\n\r\n  submitId = async (e) => {\r\n    e.preventDefault();\r\n    const { contract, certId } = this.state;\r\n    try {\r\n      const certificate = await contract.methods.getCertificate(certId).call();\r\n      console.log(certificate);\r\n      console.log(\"Name\", decrypt(certificate[0], certId));\r\n      console.log(\"University\", certificate[1]);\r\n      console.log(\"Acronym\", certificate[2]);\r\n      console.log(\"Course\",  decrypt(certificate[3], certId));\r\n      console.log(\"IPFS hash\", decrypt(certificate[4], certId));\r\n      console.log(\"Date of Issue\", decrypt(certificate[5], certId));\r\n      this.setState({name: decrypt(certificate[0], certId), university: certificate[1], acronym: certificate[2], course: decrypt(certificate[3], certId), ipfshash: decrypt(certificate[4], certId), date: decrypt(certificate[5], certId)})\r\n      this.setState({ showModal: true})\r\n    } catch (error) {\r\n      console.log(error);\r\n      alert(\"Incorrect certificate ID\")\r\n    }\r\n\r\n    \r\n  }\r\n\r\n  handleOpenModal() {\r\n    this.setState({ showModal: true})\r\n  }\r\n  \r\n  handleCloseModal () {\r\n    this.setState({ showModal: false });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Div>\r\n        <Container>\r\n          <Header>\r\n            <h2>Company</h2>\r\n            <p style={{ fontWeight: 100 }}>\r\n            You may key in the certificate id to view the Verified Certificate created on the Credentials Ethereum Blockchain\r\n            </p>\r\n          </Header>\r\n          <form className=\"cert-id-form\">\r\n            <input\r\n              className=\"cert-id\"\r\n              type=\"certId\"\r\n              id=\"certId\"\r\n              name=\"certId\"\r\n              placeholder=\"Certificate ID\"\r\n              onChange={this.handleChange}\r\n            ></input>\r\n          </form>\r\n          <SectionButton>\r\n            <ViewButton type=\"submit\" onClick={this.submitId}>\r\n              Submit\r\n            </ViewButton>\r\n          </SectionButton>\r\n        </Container>\r\n        <ReactModal\r\n          isOpen={this.state.showModal}\r\n          ariaHideApp={false}\r\n          contentLabel={\"Modal\"}\r\n          className=\"modal\"\r\n          overlayClassName=\"modal-overlay\"\r\n          onRequestClose={this.handleCloseModal}\r\n        >\r\n          <h1 style={{paddingLeft: 97}} >Cerrtificate</h1>\r\n          <div className=\"modal-grid\">\r\n            <div className=\"candidate-name\">\r\n              <h4>Name</h4>\r\n              <p>{this.state.name}</p>\r\n            </div>\r\n            <div className=\"course\">\r\n              <h4>Course Name</h4>\r\n              <p>{this.state.course}</p>\r\n            </div>\r\n            <div className=\"university\">\r\n              <h4>University Name</h4>\r\n              <p>{this.state.university}</p>\r\n            </div>\r\n            <div className=\"university-acronym\">\r\n              <h4>University Acronym</h4>\r\n              <p>SWU</p>\r\n            </div>\r\n            <div className=\"date\">\r\n              <h4>Date</h4>\r\n              <p>{this.state.date}</p>\r\n            </div>\r\n          <div className=\"modal-footer\">\r\n          <div className=\"ipfs-image\">\r\n          <a href={`https://ipfs.io/ipfs/${this.state.ipfshash}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <div style={{ display: this.state.loading ? \"block\" : \"none\", margin: \"50px\", width: \"30px\", position: \"absolute\", marginLeft: 90, marginTop:60}}>\r\n          <ClapSpinner color=\"#686769\" />\r\n          </div>\r\n          </a>\r\n          <a href={`https://ipfs.io/ipfs/${this.state.ipfshash}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <img \r\n            src={`https://ipfs.io/ipfs/${this.state.ipfshash}`}\r\n            alt=\"cer\"\r\n            onLoad={() => this.setState({loading: false})}\r\n            onError={(event) => event.target.style.display = 'none'} />\r\n          </a>\r\n          </div>\r\n          <div className=\"verify\">\r\n          <h1>Certificate Verified<span>✅</span></h1>\r\n          </div>\r\n          </div>\r\n          </div>\r\n        </ReactModal>\r\n      </Div>\r\n    );}\r\n}\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  justify-items: center;\r\n  background-color: #ffffff;\r\n  width: 500px;\r\n  margin: 0px auto;\r\n  padding: 50px 50px 40px 50px; \r\n  box-shadow: 4px 7px 24px -5px rgba(0,0,0,0.75);\r\n  border-radius: 10px;\r\n  text-align: left;\r\n`\r\n\r\nconst ViewButton = styled(Button)`\r\n  position: absolute;\r\n  margin: 10px 0px 0px 0px;\r\n  width: 100px;\r\n  padding: 10px;\r\n  :hover {\r\n    margin: 10px 0px 0px 0px;\r\n    padding: 8px;\r\n  }\r\n`\r\n\r\nconst SectionButton = styled.div`\r\n  position: relative;\r\n  width:100%;\r\n  height: 50px;\r\n`\r\n\r\nconst Header = styled.div`\r\n  margin-bottom: 20px\r\n`;\r\n\r\nexport default Company","import React, { Component } from \"react\";\r\nimport styled from 'styled-components'\r\nimport { Link } from 'react-router-dom'\r\nimport getWeb3 from \"../getWeb3\";\r\nimport '../App.css'\r\n\r\nclass Navbar extends Component {\r\n\r\n  state = {accounts: null, isConnected: false}\r\n\r\n  async componentDidMount(){\r\n \r\n    // Get network provider and web3 instance.\r\n    console.log('University Page loaded')\r\n    const web3 = await getWeb3()\r\n    \r\n    try {\r\n      // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts()\r\n      this.setState({accounts: accounts[0], isConnected: true})\r\n    } catch (error) {\r\n      this.setState({accounts: \" Not Connected \", isConnected: false,})\r\n    }\r\n};\r\n\r\n  render() {\r\n  return (\r\n    <Nav>\r\n        <StyledLink to=\"/\"><h2>Home</h2></StyledLink>\r\n        <StyledLink to=\"/university\">University</StyledLink>\r\n        <StyledLink to=\"/company\">Company</StyledLink>\r\n        <EndNav>\r\n          <h4>ACCOUNT:{this.state.accounts}</h4>\r\n        </EndNav>\r\n    </Nav>\r\n  )\r\n  }\r\n}\r\n\r\nconst Nav = styled.nav`\r\n  background-color: ${props => props.theme.colors.background};\r\n  color: ${props => props.theme.colors.font};\r\n  font-size: 20px;\r\n  display: flex;\r\n  align-items: baseline;\r\n  gap: 30px;\r\n  list-style-type: none;\r\n  padding: 15px 0px 20px 50px;\r\n  box-shadow: 2px -9px 65px -17px rgba(0,0,0,0.75);`\r\n\r\nconst StyledLink = styled(Link)`\r\n    text-decoration: none;\r\n    color: ${props => props.theme.colors.font};\r\n    &:focus, &:hover, &:visited, &:link, &:active {\r\n        text-decoration: none;\r\n    }\r\n`;\r\n\r\nconst EndNav = styled.div`\r\nbackground-color: ${props => props.theme.colors.font};\r\ncolor: ${props => props.theme.colors.background};\r\nborder-radius: 50px;\r\npadding: 5px 15px 5px 15px;\r\n  margin-left: auto;\r\n  margin-right: 40px;`\r\n\r\n\r\nexport default Navbar","import React, { Component } from 'react';\r\nimport styled from 'styled-components/';\r\nimport { Button, Div } from \"../style/style\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport Certification from \"../contracts/Certification.json\";\r\n\r\nexport default class Admin extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.submitAddress = this.submitAddress.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.state = {\r\n      accounts: null,\r\n      web3: null,\r\n      contraacts: null,\r\n      address: \"\",\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    // Get network provider and web3 instance.\r\n    console.log(\"University Page loaded\");\r\n    const web3 = await getWeb3();\r\n\r\n    // Use web3 to get the user's accounts.\r\n    const accounts = await web3.eth.getAccounts();\r\n    console.log(accounts);\r\n    // Get the contract instance.\r\n    const networkId = await web3.eth.net.getId();\r\n    const deployedNetwork = Certification.networks[networkId];\r\n    console.log(\"University Page loaded after web3\");\r\n    const instance = new web3.eth.Contract(\r\n      Certification.abi,\r\n      deployedNetwork && deployedNetwork.address\r\n    );\r\n    // Set web3, accounts, and contract to the state, and then proceed with an\r\n    // example of interacting with the contract's methods.\r\n    this.setState({ web3, accounts, contract: instance });\r\n  }\r\n\r\n  submitAddress = async (e) => {\r\n    e.preventDefault();\r\n    const { accounts, contract } = this.state;\r\n    const issuer = await contract.methods.getIssuer(accounts[0]).call()\r\n    if(issuer === true){\r\n      try {\r\n        await contract.methods\r\n        .issuerRegister(this.state.address)\r\n        .send({ from: accounts[0], gas: 3000000 })\r\n        .then(\r\n          (result) => {\r\n            console.log(\"onSubmit...\");\r\n            console.log(result.events.IssuerRegistered.returnValues);\r\n          },\r\n          (error) => {\r\n            alert(error);\r\n            console.log(error);\r\n          }\r\n        );\r\n      } catch (error) {\r\n        alert('Incorrect Adress');\r\n        console.log(error);\r\n      }\r\n    } else {alert('You are not permitted');}\r\n  };\r\n\r\n  handleChange(event) {\r\n    this.setState({\r\n      // Computed property names\r\n      // keys of the objects are computed dynamically\r\n      [event.target.name]: event.target.value,\r\n    });\r\n    console.log(event.target.name, event.target.value);\r\n    //console.log(event.target.name, event.target.value)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Div>\r\n        <Container>\r\n          <h1>Admin</h1>\r\n          <p1>\r\n            Add issuer by wallet address.\r\n          </p1>\r\n          <form className=\"issuer-form\">\r\n            <input\r\n              type=\"text\"\r\n              id=\"address\"\r\n              name=\"address\"\r\n              placeholder=\"Issuer Address\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </form>\r\n          <AdminButton onClick={this.submitAddress}>Submit</AdminButton>\r\n        </Container>\r\n      </Div>\r\n    );\r\n  }\r\n}\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  display: block;\r\n  justify-items: center;\r\n  background-color: #ffffff;\r\n  width: 500px;\r\n  margin: 0px auto;\r\n  padding: 50px 50px 40px 50px; \r\n  box-shadow: 4px 7px 24px -5px rgba(0,0,0,0.75);\r\n  border-radius: 10px;\r\n`;\r\n\r\nconst AdminButton = styled(Button)`\r\n  position: relative;\r\n  padding: 10px 20px 10px 20px;\r\n  :hover { \r\n    padding: 8px 17px;\r\n  }\r\n`;","import React, { Component } from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport Home from \"./Components/Home\";\nimport Company from \"./Components/Company\";\nimport University from \"./Components/University\";\nimport Navbar from \"./Components/Navbar\";\nimport Admin from \"./Components/Admin\";\nimport \"./App.css\";\n\n\n\nclass App extends Component {\n\n\n  render() {\n    return (\n      <div className=\"App\">\n      <Navbar />\n      <Routes>\n      <Route path=\"/\" element={<Home/>}/>\n      <Route path=\"/university\" element={<University/>}/>\n      <Route path=\"/company\"element={<Company/>}/>\n      <Route path=\"/admin\"element={<Admin/>}/>\n      </Routes>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ThemeProvider } from 'styled-components';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\nimport { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    @import url('https://fonts.googleapis.com/css2?family=Yantramanav:wght@400;500;700;900&display=swap');\n    font-family: 'Yantramanav', sans-serif;\n    font-weight: 700;\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n`\n\nconst theme = {\n    colors: {\n      background: \"#ffffff\",\n      font: \"#353535\",\n      font2: \"#8b92a1\"\n    },\n    fonts: ['Yantramanav'],\n    fontSizes: {\n      small: \"1em\",\n      medium: \"2em\",\n      large: \"3em\"\n    }\n  }\n\nReactDOM.render(\n  <BrowserRouter>\n    <GlobalStyle />\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import CryptoJS from \"crypto-js\";\r\n\r\nexport function encrypt(inputData, certId) {\r\n    return CryptoJS.AES.encrypt(JSON.stringify(inputData), certId + process.env.REACT_APP_SALT).toString();  \r\n}","import styled from 'styled-components';\r\n\r\nexport const Button = styled.button`\r\n  padding: 15px;\r\n  position: relative;\r\n  border-radius: 5px;\r\n  border: 0px solid;\r\n  margin: 20px;\r\n  background-color: #6371e5;\r\n  color: #ffffff;\r\n  transition: 0.3s;\r\n  box-shadow: 4px 2px 16px -7px rgba(0, 0, 0, 0.59);\r\n  :hover {\r\n    cursor: pointer;\r\n    background-color: #ffffff;\r\n    color: ${(props) => props.theme.colors.font};\r\n    border: 2px solid #6371e5;\r\n    padding: 14px;\r\n  }\r\n`;\r\n\r\nexport const Div = styled.div`\r\n  background-color: ${(props) => props.theme.colors.background};\r\n  width: 100%;\r\n  margin-top: 100px;\r\n  animation: fadeInAnimation ease 0.5s;\r\n            animation-iteration-count: 1;\r\n            animation-fill-mode: forwards;\r\n        @keyframes fadeInAnimation {\r\n            0% {\r\n                opacity: 0;\r\n            }\r\n            100% {\r\n                opacity: 1;\r\n            }\r\n          };\r\n  `","import React, { Component } from \"react\";\r\nimport Certification from \"../contracts/Certification.json\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport styled from \"styled-components\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { encrypt } from \"./encrypt.js\";\r\nimport ipfs from '../ipfs'\r\nimport { Button, Div } from \"../style/style\";\r\nimport '../style/style.css';\r\n\r\nexport class University extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.captureFile = this.captureFile.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.submitData = this.submitData.bind(this);\r\n    this.validate = this.validate.bind(this);\r\n    this.state = {\r\n      storageValue: 0,\r\n      web3: null,\r\n      accounts: null,\r\n      contract: null,\r\n      chainId: null,\r\n      result: null,\r\n      ipfsHash: null,\r\n      certId: '',\r\n      showId: '',\r\n      firstname: '',\r\n      lastname: '',\r\n      university: '',\r\n      acronym: '',\r\n      course: '',\r\n      buffer: null,\r\n      issuer: null,\r\n      errors: [],\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    // Get network provider and web3 instance.\r\n    console.log(\"University Page loaded\");\r\n    const web3 = await getWeb3();\r\n\r\n    // Use web3 to get the user's accounts.\r\n    const accounts = await web3.eth.getAccounts();\r\n    console.log(accounts);\r\n    // Get the contract instance.\r\n    const networkId = await web3.eth.net.getId();\r\n    const chainId = await web3.eth.getChainId();\r\n    this.setState({chainId: chainId})\r\n    console.log(chainId)\r\n    const deployedNetwork = Certification.networks[networkId];\r\n    console.log(\"University Page loaded after web3\");\r\n    const instance = new web3.eth.Contract(\r\n      Certification.abi,\r\n      deployedNetwork && deployedNetwork.address\r\n    );\r\n    // Set web3, accounts, and contract to the state, and then proceed with an\r\n    // example of interacting with the contract's methods.\r\n    this.setState({ web3, accounts, contract: instance });\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({\r\n      // Computed property names\r\n      // keys of the objects are computed dynamically\r\n      [event.target.name]: event.target.value,\r\n    });\r\n    //console.log(event.target.name, event.target.value)\r\n  }\r\n\r\n  captureFile(e) {\r\n    e.preventDefault();\r\n    const file = e.target.files[0];\r\n    const reader = new window.FileReader();\r\n    reader.readAsArrayBuffer(file);\r\n    reader.onloadend = () => {\r\n      this.setState({ buffer: Buffer(reader.result) });\r\n      console.log(\"buffer\", this.state.buffer);\r\n    };\r\n  }\r\n\r\n  refreshPage() {\r\n    window.location.reload();\r\n    console.log(\"clicked!1\");\r\n  }\r\n\r\n  validate(name, lastname, university, acronym, course) {\r\n    // we are going to store errors for all fields\r\n    // in a signle array\r\n    const errors = [];\r\n\r\n    if (name.length === 0) {\r\n      errors.push(\"Name can't be empty\");\r\n    }\r\n\r\n    if (lastname.length === 0) {\r\n      errors.push(\"Last name can't be empty\");\r\n    }\r\n    if (university.length === 0) {\r\n      errors.push(\"University can't be empty\");\r\n    }\r\n    if (acronym.length === 0) {\r\n      errors.push(\"Acronym can't be empty\");\r\n    }\r\n\r\n    if (course.length === 0) {\r\n      errors.push(\"Password can't be empty\");\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  submitData = async (e) => {\r\n    e.preventDefault();\r\n    const { firstname, lastname, university, acronym, course } = this.state;\r\n    const errors = this.validate(firstname, lastname, university, acronym, course);\r\n    console.log( firstname, lastname, acronym,)\r\n    console.log(errors);\r\n    if (errors.length === 0) {\r\n      const { accounts, contract } = this.state;\r\n      const d = new Date();\r\n      const issuer = await contract.methods.getIssuer(accounts[0]).call();\r\n      console.log(issuer);\r\n      if (issuer === true) {\r\n        if (this.state.buffer != null) {\r\n          const result = await ipfs.files.add(this.state.buffer);\r\n          const ipfsHash = await result[0].hash;\r\n          this.setState({ ipfsHash: ipfsHash });\r\n          console.log(\"ipfsHash\", this.state.ipfsHash);\r\n        }\r\n        const certId = uuidv4();\r\n        const fullName = `${this.state.firstname} ${this.state.lastname}`;\r\n        console.log(\r\n          this.state.firstname,\r\n          this.state.lastname,\r\n          this.state.university,\r\n          this.state.acronym,\r\n          this.state.course\r\n        );\r\n        await contract.methods\r\n          .generateCertificate(\r\n            certId,\r\n            encrypt(fullName, certId),\r\n            this.state.university,\r\n            this.state.acronym,\r\n            encrypt(this.state.course, certId),\r\n            encrypt(\r\n              `${d.getDate()}-${d.getMonth()}-${d.getFullYear()}`,\r\n              certId\r\n            ),\r\n            encrypt(this.state.ipfsHash, certId)\r\n          )\r\n          .send({ from: accounts[0], gas: 3000000 })\r\n          .then(\r\n            (result) => {\r\n              console.log(\"onSubmit...\");\r\n              alert(\"Upload successfully!\");\r\n              contract.getPastEvents(\"CertificateGenerated\");\r\n              console.log(certId);\r\n              console.log(result.events.CertificateGenerated.returnValues);\r\n              this.setState({certId : certId, showId: true})\r\n            },\r\n            (error) => {\r\n              console.log(error);\r\n            }\r\n          );\r\n        this.setState({\r\n          firstname: \"\",\r\n          lastname: \"\",\r\n          university: \"\",\r\n          acronym: \"\",\r\n          course: \"\",\r\n        });\r\n        this.setState({errors: []})\r\n      } else {\r\n        alert(\"You are not allowed\");\r\n      }\r\n    } else {\r\n      this.setState({ errors });\r\n      return;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (!this.state.web3) {\r\n      return (\r\n        <Div>\r\n          <img\r\n            src={\"/images/metamask.png\"}\r\n            style={{ margin: \"40px\" }}\r\n            alt=\"metamask logo\"\r\n            height=\"200\"\r\n            width=\"200\"\r\n          />\r\n          <h1>Can not detect to Web3 Provider</h1>\r\n          <h1>Please make sure you have connected to your wallet </h1>\r\n          <h1>And refresh this page. </h1>\r\n          <Button\r\n            onClick={() => window.location.reload()}\r\n            style={{ width: 100, fontSize: 20 }}\r\n          >\r\n            OK\r\n          </Button>\r\n        </Div>\r\n      );\r\n    } else {\r\n      const { errors } = this.state;\r\n      return (\r\n        <Div>\r\n          <Container>\r\n            <Form className=\"university-form\">\r\n              <label htmlFor=\"firstname\">Your name*</label>\r\n              <input\r\n                className=\"candidate-name-textfield\"\r\n                name=\"firstname\"\r\n                id=\"firstname\"\r\n                value={this.state.firstname}\r\n                onChange={this.handleChange}\r\n                placeholder=\"First Name\"\r\n                type=\"text\"\r\n                required\r\n              />\r\n              <input\r\n                className=\"candidate-lastname-textfield\"\r\n                name=\"lastname\"\r\n                id=\"lastname\"\r\n                value={this.state.lastname}\r\n                onChange={this.handleChange}\r\n                placeholder=\"Last Name\"\r\n                type=\"text\"\r\n                required\r\n              />\r\n              <label htmlFor=\"university\">University*</label>\r\n              <input\r\n                className=\"form\"\r\n                name=\"university\"\r\n                id=\"university\"\r\n                value={this.state.university}\r\n                onChange={this.handleChange}\r\n                placeholder=\"University\"\r\n                type=\"text\"\r\n                required\r\n              />\r\n              <label htmlFor=\"acronym\">University Acronym*</label>\r\n              <input\r\n                className=\"form\"\r\n                name=\"acronym\"\r\n                id=\"acronym\"\r\n                value={this.state.acronym}\r\n                placeholder=\"University Acronym\"\r\n                onChange={this.handleChange}\r\n                type=\"text\"\r\n                required\r\n              />\r\n              <label htmlFor=\"course\">Course*</label>\r\n              <input\r\n                className=\"form\"\r\n                name=\"course\"\r\n                id=\"course\"\r\n                value={this.state.course}\r\n                placeholder=\"Course\"\r\n                onChange={this.handleChange}\r\n                type=\"text\"\r\n              />\r\n              <label htmlFor=\"file\">Certificate</label>\r\n              <input\r\n                className=\"input-file\"\r\n                id=\"file\"\r\n                type=\"file\"\r\n                onChange={this.captureFile}\r\n              />\r\n            </Form>\r\n            <FormButton type=\"submit\" onClick={this.submitData}>\r\n              ISSUE CERTIFICATE\r\n            </FormButton>\r\n          </Container>\r\n          <CertID style={{display: this.state.showId ? \"block\" : \"none\"}} >{this.state.certId}</CertID>\r\n          <div style={{display: this.state.errors.length > 0 ? \"block\" : \"none\"}}>\r\n          <Error>\r\n          {errors.map(error => (\r\n          <p key={error}>Error: {error}</p>\r\n          ))}\r\n          </Error>\r\n          </div>\r\n        </Div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  display: grid;\r\n  grid-template-columns: 60px 1fr 60px;\r\n  grid-template-rows: 50px 1fr 120px;\r\n  justify-items: center;\r\n  background-color: #ffffff;\r\n  width: 500px;\r\n  height: 650px;\r\n  margin: 0px auto;\r\n  box-shadow: 4px 7px 24px -5px rgba(0,0,0,0.75);\r\n  border-radius: 10px;`\r\n\r\nconst Form = styled.form`\r\n  width: 100%;\r\n  grid-column-start: 2;\r\n  grid-column-end: 3;\r\n  grid-row-start: 2;\r\n  grid-row-end: 3;\r\n  text-align: left;\r\n  padding-left: 30px;\r\n  `\r\n\r\nconst FormButton = styled(Button)`\r\n  grid-column-start: 2;\r\n  grid-column-end: 3;\r\n  grid-row-start: 3;\r\n  grid-row-end: 4;\r\n  height: 50px;`\r\n\r\nconst Error = styled.div`\r\n    right: 400px;\r\n    top: 175px;\r\n    position: absolute;\r\n    box-shadow: 4px 7px 24px -5px rgb(0 0 0 / 75%);\r\n    border-radius: 10px;\r\n    padding: 20px;\r\n    color: #faad14;\r\n`;\r\n\r\nconst CertID = styled.div`\r\n  box-shadow: 4px 7px 24px -5px rgb(0 0 0 / 75%);\r\n  display: block;\r\n  position: absolute;\r\n  margin-top: 30px;\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  left: 50%;\r\n  transform: translate(-50%);\r\n`;\r\n\r\nexport default University;\r\n","const IPFS = require('ipfs-api');\r\nconst ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https'})\r\n\r\nexport default ipfs;","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise( async(resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:7545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n\n  });\n\nexport default getWeb3;\n"],"sourceRoot":""}